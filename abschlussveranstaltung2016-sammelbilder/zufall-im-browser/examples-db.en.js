examples["01-sum"] = { description: "Sum of two dice", code: "#random\n\nx = roll()\ny = roll()\na = x + y" };
examples["02-till6"] = { description: "How long till a six occurs?", code: "#random\n\n# Until we change our mind, ...\nwhile True:\n    # ... we roll a dice.\n    x = roll()\n\n    # Did we roll a six?\n    if x == 6:\n        # Yes! Stop rolling.\n        break" };
examples["03-triplets"] = { description: "How long to triplets?", code: "#random\n\nultimate, penultimate, antepenultimate = None, None, None \n\nwhile True:\n    antepenultimate = penultimate\n    penultimate     = ultimate\n    ultimate        = roll()\n\n    if ultimate == penultimate == antepenultimate:\n        break\n\n# Reset variables so that they aren't plotted\nultimate, penultimate, antepenultimate = None, None, None " };
examples["04-coupon"] = { description: "How long till every number occured? (Coupon collector's problem)", code: "#random\n\nseenNumbers = {}\n\n# Until we change our mind, ...\nwhile True:\n    # ... we roll and record the occuring numbers.\n    seenNumbers[roll()] = True\n\n    # Have we seen all six numbers?\n    if len(seenNumbers) == 6:\n        # Yes! Then we stop.\n        break" };
examples["05-stake-doubling"] = { description: "Stake doubling strategy", code: "#random\n\nbalance = 100  # seed money\nstake   = 1\n\n# As long as we aren't broke and not yet content, ...\nwhile balance >= stake and balance < 120:\n    # ... we toss a coin.\n    coin = roll(sides=2)\n\n    # In case we lose:\n    if coin == 1:\n        balance = balance - stake\n        stake   = 2 * stake\n    # In case we win:\n    else:\n        balance = balance + stake\n        stake = 1\n\n# Reset variables so that they aren't plotted\ncoin, stake = None, None" };
examples["06-penneys-game"] = { description: "Penney's Game", code: "#random\n\n# Two players select sequences of heads\n# and tails (of the same length).\n# Then a fair coin is repeatedly tossed.\n# The player whose pattern appears first wins.\n# \n# Details are in one of the Numberphile videos:\n# https://www.youtube.com/watch?v=Sa9jLWKrX0c\n\npattern1 = \"110\"\npattern2 = \"011\"\n\ndigits = \"\"  # Protocol of the previous coin tosses\n\nwhile True:\n    # Toss a coin\n    if roll(2) == 1:\n        digits = digits + \"0\"\n    else:\n        digits = digits + \"1\"\n\n    # Detect winner\n    if digits.endswith(pattern1):\n        winner = 1\n        break\n    elif digits.endswith(pattern2):\n        winner = 2\n        break" };
examples["07-runs"] = { description: "Runs in coin tosses", code: "#random\n\n# This code counts the number of runs in\n# repeated coin tosses. For instance the\n# tosses \"HHHTTTTTHH\" contain three runs.\n#\n# The number of runs is the main ingredient\n# of the \"run test\". This is a statistical\n# test which tries to detect whether a given\n# series of coin tosses was the result of a\n# fair coin.\n\n# Result of the previous coin toss\nlastRoll     = None\n\n# Number of runs so far\nnumberOfRuns = 0\n\nfor i in range(50):\n    # We toss a coin ...\n    newRoll = roll(sides=2)\n\n    # ... and compare the result with the previous\n    # toss. If it's different, then we're dealing\n    # with a new run.\n    if newRoll != lastRoll:\n        lastRoll = newRoll\n        numberOfRuns = numberOfRuns + 1\n\n# Reset variables so they don't get plotted\nlastRoll = None\nnewRoll  = None" };
examples["10-winlose"] = { description: "Procentually equal profits or losses", code: "#random\n\n# Inspired from\n# http://nautil.us/issue/44/luck/-how-to-build-a-probability-microscope\n\n# Seed capital: 100 dollars\ncapital = 100\n\n# For 50 times, ...\nfor i in range(50):\n    # ... we'll roll a dice.\n    if(roll() % 2 == 0):\n        # If heads, we earn a profit of 10%.\n        capital *= 1.10\n    else:\n        # If tails, we lose 10%.\n        capital *= 0.90" };
